/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.sequence.cs.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SequenceCSGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.SERE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleSEREParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cFusionSERELeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSEREParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cConcatenationSERELeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightSEREParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//SERE:
		//	SimpleSERE (':' {FusionSERE.left=current} right=SERE | ';' {ConcatenationSERE.left=current} right=SERE);
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleSERE (':' {FusionSERE.left=current} right=SERE | ';' {ConcatenationSERE.left=current} right=SERE)
		public Group getGroup() { return cGroup; }
		
		//SimpleSERE
		public RuleCall getSimpleSEREParserRuleCall_0() { return cSimpleSEREParserRuleCall_0; }
		
		//':' {FusionSERE.left=current} right=SERE | ';' {ConcatenationSERE.left=current} right=SERE
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//':' {FusionSERE.left=current} right=SERE
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }
		
		//{FusionSERE.left=current}
		public Action getFusionSERELeftAction_1_0_1() { return cFusionSERELeftAction_1_0_1; }
		
		//right=SERE
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//SERE
		public RuleCall getRightSEREParserRuleCall_1_0_2_0() { return cRightSEREParserRuleCall_1_0_2_0; }
		
		//';' {ConcatenationSERE.left=current} right=SERE
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }
		
		//{ConcatenationSERE.left=current}
		public Action getConcatenationSERELeftAction_1_1_1() { return cConcatenationSERELeftAction_1_1_1; }
		
		//right=SERE
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//SERE
		public RuleCall getRightSEREParserRuleCall_1_1_2_0() { return cRightSEREParserRuleCall_1_1_2_0; }
	}
	public class SimpleSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.SimpleSERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceTerminalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompoundSEREParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleSERE:
		//	SequenceTerminal
		//	| Sequence
		//	| CompoundSERE;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceTerminal | Sequence | CompoundSERE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SequenceTerminal
		public RuleCall getSequenceTerminalParserRuleCall_0() { return cSequenceTerminalParserRuleCall_0; }
		
		//Sequence
		public RuleCall getSequenceParserRuleCall_1() { return cSequenceParserRuleCall_1; }
		
		//CompoundSERE
		public RuleCall getCompoundSEREParserRuleCall_2() { return cCompoundSEREParserRuleCall_2; }
	}
	public class SequenceTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.SequenceTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotSequenceTerminalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cLiteralAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLiteralSequenceTerminalParserRuleCall_0_2_0 = (RuleCall)cLiteralAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLiteralAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLiteralTrueKeyword_1_1_0_0 = (Keyword)cLiteralAssignment_1_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOCLExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cOclKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		
		//SequenceTerminal:
		//	{NotSequenceTerminal} 'not' literal=SequenceTerminal
		//	| {BooleanLiteral} (literal?='true' | 'false') | {OCLExpression} 'ocl' expression=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{NotSequenceTerminal} 'not' literal=SequenceTerminal | {BooleanLiteral} (literal?='true' | 'false') | {OCLExpression}
		//'ocl' expression=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NotSequenceTerminal} 'not' literal=SequenceTerminal
		public Group getGroup_0() { return cGroup_0; }
		
		//{NotSequenceTerminal}
		public Action getNotSequenceTerminalAction_0_0() { return cNotSequenceTerminalAction_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//literal=SequenceTerminal
		public Assignment getLiteralAssignment_0_2() { return cLiteralAssignment_0_2; }
		
		//SequenceTerminal
		public RuleCall getLiteralSequenceTerminalParserRuleCall_0_2_0() { return cLiteralSequenceTerminalParserRuleCall_0_2_0; }
		
		//{BooleanLiteral} (literal?='true' | 'false')
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }
		
		//literal?='true' | 'false'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//literal?='true'
		public Assignment getLiteralAssignment_1_1_0() { return cLiteralAssignment_1_1_0; }
		
		//'true'
		public Keyword getLiteralTrueKeyword_1_1_0_0() { return cLiteralTrueKeyword_1_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1_1() { return cFalseKeyword_1_1_1; }
		
		//{OCLExpression} 'ocl' expression=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{OCLExpression}
		public Action getOCLExpressionAction_2_0() { return cOCLExpressionAction_2_0; }
		
		//'ocl'
		public Keyword getOclKeyword_2_1() { return cOclKeyword_2_1; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_2_2_0() { return cExpressionSTRINGTerminalRuleCall_2_2_0; }
	}
	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.Sequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBracedSEREParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepeatedSEREParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Sequence:
		//	BracedSERE | RepeatedSERE;
		@Override public ParserRule getRule() { return rule; }
		
		//BracedSERE | RepeatedSERE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BracedSERE
		public RuleCall getBracedSEREParserRuleCall_0() { return cBracedSEREParserRuleCall_0; }
		
		//RepeatedSERE
		public RuleCall getRepeatedSEREParserRuleCall_1() { return cRepeatedSEREParserRuleCall_1; }
	}
	public class RepeatedSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.RepeatedSERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanCountedConsecutiveRepetitionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionSequenceTerminalParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cCountAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cCountCountParserRuleCall_0_3_0 = (RuleCall)cCountAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSequenceCountedConsecutiveRepetitionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionBracedSEREParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cCountAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCountCountParserRuleCall_1_3_0 = (RuleCall)cCountAssignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSequenceCountedConsecutiveRepetitionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionRepeatedSEREParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_4_1 = (Keyword)cGroup_2_4.eContents().get(1);
		private final Assignment cCountAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cCountCountParserRuleCall_2_5_0 = (RuleCall)cCountAssignment_2_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanConsecutiveRepetitionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionSequenceTerminalParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cPlusSignKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSequenceConsecutiveRepetitionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionBracedSEREParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cPlusSignKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSequenceConsecutiveRepetitionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExpressionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpressionRepeatedSEREParserRuleCall_5_2_0 = (RuleCall)cExpressionAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_5_4 = (Group)cGroup_5.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Keyword cPlusSignKeyword_5_4_1 = (Keyword)cGroup_5_4.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBooleanCountedNonConsecutiveRepetitionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionSequenceTerminalParserRuleCall_6_1_0 = (RuleCall)cExpressionAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_2_1 = (Keyword)cGroup_6_2.eContents().get(1);
		private final Assignment cCountAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cCountCountParserRuleCall_6_3_0 = (RuleCall)cCountAssignment_6_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBooleanCountedGotoRepetitionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionSequenceTerminalParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7_2_1 = (Keyword)cGroup_7_2.eContents().get(1);
		private final Assignment cCountAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cCountCountParserRuleCall_7_3_0 = (RuleCall)cCountAssignment_7_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cWildCardAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cAsteriskKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cCountAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cCountCountParserRuleCall_8_3_0 = (RuleCall)cCountAssignment_8_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cLengthOneAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cPlusSignKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		//RepeatedSERE:
		//	{BooleanCountedConsecutiveRepetition} expression=SequenceTerminal (=> '[' '*') count=Count? ']'
		//	| {SequenceCountedConsecutiveRepetition} expression=BracedSERE (=> '[' '*') count=Count? ']'
		//	| {SequenceCountedConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '*') count=Count? ']'
		//	| {BooleanConsecutiveRepetition} expression=SequenceTerminal (=> '[' '+') ']'
		//	| {SequenceConsecutiveRepetition} expression=BracedSERE (=> '[' '+') ']'
		//	| {SequenceConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '+') ']'
		//	| {BooleanCountedNonConsecutiveRepetition} expression=SequenceTerminal (=> '[' '=') count=Count ']'
		//	| {BooleanCountedGotoRepetition} expression=SequenceTerminal (=> '[' '->') count=Count? ']'
		//	| {WildCard} '[' '*' count=Count? ']'
		//	| {LengthOne} '[' '+' ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanCountedConsecutiveRepetition} expression=SequenceTerminal (=> '[' '*') count=Count? ']' |
		//{SequenceCountedConsecutiveRepetition} expression=BracedSERE (=> '[' '*') count=Count? ']' |
		//{SequenceCountedConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '*') count=Count? ']' |
		//{BooleanConsecutiveRepetition} expression=SequenceTerminal (=> '[' '+') ']' | {SequenceConsecutiveRepetition}
		//expression=BracedSERE (=> '[' '+') ']' | {SequenceConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '+')
		//']' | {BooleanCountedNonConsecutiveRepetition} expression=SequenceTerminal (=> '[' '=') count=Count ']' |
		//{BooleanCountedGotoRepetition} expression=SequenceTerminal (=> '[' '->') count=Count? ']' | {WildCard} '[' '*'
		//count=Count? ']' | {LengthOne} '[' '+' ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanCountedConsecutiveRepetition} expression=SequenceTerminal (=> '[' '*') count=Count? ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanCountedConsecutiveRepetition}
		public Action getBooleanCountedConsecutiveRepetitionAction_0_0() { return cBooleanCountedConsecutiveRepetitionAction_0_0; }
		
		//expression=SequenceTerminal
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//SequenceTerminal
		public RuleCall getExpressionSequenceTerminalParserRuleCall_0_1_0() { return cExpressionSequenceTerminalParserRuleCall_0_1_0; }
		
		//=> '[' '*'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_0_2_0() { return cLeftSquareBracketKeyword_0_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_2_1() { return cAsteriskKeyword_0_2_1; }
		
		//count=Count?
		public Assignment getCountAssignment_0_3() { return cCountAssignment_0_3; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_0_3_0() { return cCountCountParserRuleCall_0_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//{SequenceCountedConsecutiveRepetition} expression=BracedSERE (=> '[' '*') count=Count? ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SequenceCountedConsecutiveRepetition}
		public Action getSequenceCountedConsecutiveRepetitionAction_1_0() { return cSequenceCountedConsecutiveRepetitionAction_1_0; }
		
		//expression=BracedSERE
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//BracedSERE
		public RuleCall getExpressionBracedSEREParserRuleCall_1_1_0() { return cExpressionBracedSEREParserRuleCall_1_1_0; }
		
		//=> '[' '*'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_2_1() { return cAsteriskKeyword_1_2_1; }
		
		//count=Count?
		public Assignment getCountAssignment_1_3() { return cCountAssignment_1_3; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_1_3_0() { return cCountCountParserRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
		
		//{SequenceCountedConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '*') count=Count? ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//{SequenceCountedConsecutiveRepetition}
		public Action getSequenceCountedConsecutiveRepetitionAction_2_0() { return cSequenceCountedConsecutiveRepetitionAction_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expression=RepeatedSERE
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//RepeatedSERE
		public RuleCall getExpressionRepeatedSEREParserRuleCall_2_2_0() { return cExpressionRepeatedSEREParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//=> '[' '*'
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_2_4_0() { return cLeftSquareBracketKeyword_2_4_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_4_1() { return cAsteriskKeyword_2_4_1; }
		
		//count=Count?
		public Assignment getCountAssignment_2_5() { return cCountAssignment_2_5; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_2_5_0() { return cCountCountParserRuleCall_2_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_6() { return cRightSquareBracketKeyword_2_6; }
		
		//{BooleanConsecutiveRepetition} expression=SequenceTerminal (=> '[' '+') ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanConsecutiveRepetition}
		public Action getBooleanConsecutiveRepetitionAction_3_0() { return cBooleanConsecutiveRepetitionAction_3_0; }
		
		//expression=SequenceTerminal
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//SequenceTerminal
		public RuleCall getExpressionSequenceTerminalParserRuleCall_3_1_0() { return cExpressionSequenceTerminalParserRuleCall_3_1_0; }
		
		//=> '[' '+'
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_3_2_0() { return cLeftSquareBracketKeyword_3_2_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_2_1() { return cPlusSignKeyword_3_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//{SequenceConsecutiveRepetition} expression=BracedSERE (=> '[' '+') ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//{SequenceConsecutiveRepetition}
		public Action getSequenceConsecutiveRepetitionAction_4_0() { return cSequenceConsecutiveRepetitionAction_4_0; }
		
		//expression=BracedSERE
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//BracedSERE
		public RuleCall getExpressionBracedSEREParserRuleCall_4_1_0() { return cExpressionBracedSEREParserRuleCall_4_1_0; }
		
		//=> '[' '+'
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_4_2_0() { return cLeftSquareBracketKeyword_4_2_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_2_1() { return cPlusSignKeyword_4_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//{SequenceConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '+') ']'
		public Group getGroup_5() { return cGroup_5; }
		
		//{SequenceConsecutiveRepetition}
		public Action getSequenceConsecutiveRepetitionAction_5_0() { return cSequenceConsecutiveRepetitionAction_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//expression=RepeatedSERE
		public Assignment getExpressionAssignment_5_2() { return cExpressionAssignment_5_2; }
		
		//RepeatedSERE
		public RuleCall getExpressionRepeatedSEREParserRuleCall_5_2_0() { return cExpressionRepeatedSEREParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//=> '[' '+'
		public Group getGroup_5_4() { return cGroup_5_4; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_5_4_0() { return cLeftSquareBracketKeyword_5_4_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_5_4_1() { return cPlusSignKeyword_5_4_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_5() { return cRightSquareBracketKeyword_5_5; }
		
		//{BooleanCountedNonConsecutiveRepetition} expression=SequenceTerminal (=> '[' '=') count=Count ']'
		public Group getGroup_6() { return cGroup_6; }
		
		//{BooleanCountedNonConsecutiveRepetition}
		public Action getBooleanCountedNonConsecutiveRepetitionAction_6_0() { return cBooleanCountedNonConsecutiveRepetitionAction_6_0; }
		
		//expression=SequenceTerminal
		public Assignment getExpressionAssignment_6_1() { return cExpressionAssignment_6_1; }
		
		//SequenceTerminal
		public RuleCall getExpressionSequenceTerminalParserRuleCall_6_1_0() { return cExpressionSequenceTerminalParserRuleCall_6_1_0; }
		
		//=> '[' '='
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_6_2_0() { return cLeftSquareBracketKeyword_6_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_2_1() { return cEqualsSignKeyword_6_2_1; }
		
		//count=Count
		public Assignment getCountAssignment_6_3() { return cCountAssignment_6_3; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_6_3_0() { return cCountCountParserRuleCall_6_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_4() { return cRightSquareBracketKeyword_6_4; }
		
		//{BooleanCountedGotoRepetition} expression=SequenceTerminal (=> '[' '->') count=Count? ']'
		public Group getGroup_7() { return cGroup_7; }
		
		//{BooleanCountedGotoRepetition}
		public Action getBooleanCountedGotoRepetitionAction_7_0() { return cBooleanCountedGotoRepetitionAction_7_0; }
		
		//expression=SequenceTerminal
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }
		
		//SequenceTerminal
		public RuleCall getExpressionSequenceTerminalParserRuleCall_7_1_0() { return cExpressionSequenceTerminalParserRuleCall_7_1_0; }
		
		//=> '[' '->'
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//=> '['
		public Keyword getLeftSquareBracketKeyword_7_2_0() { return cLeftSquareBracketKeyword_7_2_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7_2_1() { return cHyphenMinusGreaterThanSignKeyword_7_2_1; }
		
		//count=Count?
		public Assignment getCountAssignment_7_3() { return cCountAssignment_7_3; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_7_3_0() { return cCountCountParserRuleCall_7_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_4() { return cRightSquareBracketKeyword_7_4; }
		
		//{WildCard} '[' '*' count=Count? ']'
		public Group getGroup_8() { return cGroup_8; }
		
		//{WildCard}
		public Action getWildCardAction_8_0() { return cWildCardAction_8_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_1() { return cLeftSquareBracketKeyword_8_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_8_2() { return cAsteriskKeyword_8_2; }
		
		//count=Count?
		public Assignment getCountAssignment_8_3() { return cCountAssignment_8_3; }
		
		//Count
		public RuleCall getCountCountParserRuleCall_8_3_0() { return cCountCountParserRuleCall_8_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_4() { return cRightSquareBracketKeyword_8_4; }
		
		//{LengthOne} '[' '+' ']'
		public Group getGroup_9() { return cGroup_9; }
		
		//{LengthOne}
		public Action getLengthOneAction_9_0() { return cLengthOneAction_9_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9_1() { return cLeftSquareBracketKeyword_9_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_9_2() { return cPlusSignKeyword_9_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9_3() { return cRightSquareBracketKeyword_9_3; }
	}
	public class BracedSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.BracedSERE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSEREParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracedSERE:
		//	'{' expression=SERE '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' expression=SERE '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//expression=SERE
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//SERE
		public RuleCall getExpressionSEREParserRuleCall_1_0() { return cExpressionSEREParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class CompoundSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.CompoundSERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRepeatedSEREParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBracedSEREParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBinaryCompoundSEREParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CompoundSERE:
		//	RepeatedSERE
		//	| BracedSERE
		//	| BinaryCompoundSERE;
		@Override public ParserRule getRule() { return rule; }
		
		//RepeatedSERE | BracedSERE | BinaryCompoundSERE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RepeatedSERE
		public RuleCall getRepeatedSEREParserRuleCall_0() { return cRepeatedSEREParserRuleCall_0; }
		
		//BracedSERE
		public RuleCall getBracedSEREParserRuleCall_1() { return cBracedSEREParserRuleCall_1; }
		
		//BinaryCompoundSERE
		public RuleCall getBinaryCompoundSEREParserRuleCall_2() { return cBinaryCompoundSEREParserRuleCall_2; }
	}
	public class BinaryCompoundSEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.BinaryCompoundSERE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSEREOrAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cLeftAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cLeftRepeatedSEREParserRuleCall_0_1_0_0 = (RuleCall)cLeftAssignment_0_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cLeftBracedSEREParserRuleCall_0_1_1_0 = (RuleCall)cLeftAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cLeftBinaryCompoundSEREParserRuleCall_0_1_2_1_0 = (RuleCall)cLeftAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2_2 = (Keyword)cGroup_0_1_2.eContents().get(2);
		private final Keyword cVerticalLineKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Assignment cRightAssignment_0_3_0 = (Assignment)cAlternatives_0_3.eContents().get(0);
		private final RuleCall cRightRepeatedSEREParserRuleCall_0_3_0_0 = (RuleCall)cRightAssignment_0_3_0.eContents().get(0);
		private final Assignment cRightAssignment_0_3_1 = (Assignment)cAlternatives_0_3.eContents().get(1);
		private final RuleCall cRightBracedSEREParserRuleCall_0_3_1_0 = (RuleCall)cRightAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_3_2 = (Group)cAlternatives_0_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_3_2_0 = (Keyword)cGroup_0_3_2.eContents().get(0);
		private final Assignment cRightAssignment_0_3_2_1 = (Assignment)cGroup_0_3_2.eContents().get(1);
		private final RuleCall cRightBinaryCompoundSEREParserRuleCall_0_3_2_1_0 = (RuleCall)cRightAssignment_0_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_2_2 = (Keyword)cGroup_0_3_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSEREAndNLMAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cLeftRepeatedSEREParserRuleCall_1_1_0_0 = (RuleCall)cLeftAssignment_1_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLeftBracedSEREParserRuleCall_1_1_1_0 = (RuleCall)cLeftAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cLeftBinaryCompoundSEREParserRuleCall_1_1_2_1_0 = (RuleCall)cLeftAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		private final Keyword cAmpersandKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_3_0 = (Assignment)cAlternatives_1_3.eContents().get(0);
		private final RuleCall cRightRepeatedSEREParserRuleCall_1_3_0_0 = (RuleCall)cRightAssignment_1_3_0.eContents().get(0);
		private final Assignment cRightAssignment_1_3_1 = (Assignment)cAlternatives_1_3.eContents().get(1);
		private final RuleCall cRightBracedSEREParserRuleCall_1_3_1_0 = (RuleCall)cRightAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_3_2 = (Group)cAlternatives_1_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cRightAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final RuleCall cRightBinaryCompoundSEREParserRuleCall_1_3_2_1_0 = (RuleCall)cRightAssignment_1_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_2_2 = (Keyword)cGroup_1_3_2.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSEREAndLMAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cLeftAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cLeftRepeatedSEREParserRuleCall_2_1_0_0 = (RuleCall)cLeftAssignment_2_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cLeftBracedSEREParserRuleCall_2_1_1_0 = (RuleCall)cLeftAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cLeftBinaryCompoundSEREParserRuleCall_2_1_2_1_0 = (RuleCall)cLeftAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2_2 = (Keyword)cGroup_2_1_2.eContents().get(2);
		private final Keyword cAmpersandAmpersandKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Assignment cRightAssignment_2_3_0 = (Assignment)cAlternatives_2_3.eContents().get(0);
		private final RuleCall cRightRepeatedSEREParserRuleCall_2_3_0_0 = (RuleCall)cRightAssignment_2_3_0.eContents().get(0);
		private final Assignment cRightAssignment_2_3_1 = (Assignment)cAlternatives_2_3.eContents().get(1);
		private final RuleCall cRightBracedSEREParserRuleCall_2_3_1_0 = (RuleCall)cRightAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_3_2 = (Group)cAlternatives_2_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_3_2_0 = (Keyword)cGroup_2_3_2.eContents().get(0);
		private final Assignment cRightAssignment_2_3_2_1 = (Assignment)cGroup_2_3_2.eContents().get(1);
		private final RuleCall cRightBinaryCompoundSEREParserRuleCall_2_3_2_1_0 = (RuleCall)cRightAssignment_2_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3_2_2 = (Keyword)cGroup_2_3_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSEREWithinAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cLeftAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cLeftRepeatedSEREParserRuleCall_3_1_0_0 = (RuleCall)cLeftAssignment_3_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cLeftBracedSEREParserRuleCall_3_1_1_0 = (RuleCall)cLeftAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cLeftBinaryCompoundSEREParserRuleCall_3_1_2_1_0 = (RuleCall)cLeftAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2_2 = (Keyword)cGroup_3_1_2.eContents().get(2);
		private final Keyword cWithinKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_3_3 = (Alternatives)cGroup_3.eContents().get(3);
		private final Assignment cRightAssignment_3_3_0 = (Assignment)cAlternatives_3_3.eContents().get(0);
		private final RuleCall cRightRepeatedSEREParserRuleCall_3_3_0_0 = (RuleCall)cRightAssignment_3_3_0.eContents().get(0);
		private final Assignment cRightAssignment_3_3_1 = (Assignment)cAlternatives_3_3.eContents().get(1);
		private final RuleCall cRightBracedSEREParserRuleCall_3_3_1_0 = (RuleCall)cRightAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_3_2 = (Group)cAlternatives_3_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3_3_2_0 = (Keyword)cGroup_3_3_2.eContents().get(0);
		private final Assignment cRightAssignment_3_3_2_1 = (Assignment)cGroup_3_3_2.eContents().get(1);
		private final RuleCall cRightBinaryCompoundSEREParserRuleCall_3_3_2_1_0 = (RuleCall)cRightAssignment_3_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3_2_2 = (Keyword)cGroup_3_3_2.eContents().get(2);
		
		//BinaryCompoundSERE:
		//	{SEREOr} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '|' (right=RepeatedSERE |
		//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREAndNLM} (left=RepeatedSERE | left=BracedSERE | '('
		//	left=BinaryCompoundSERE ')') -> '&' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')') |
		//	{SEREAndLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '&&' (right=RepeatedSERE |
		//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREWithin} (left=RepeatedSERE | left=BracedSERE | '('
		//	left=BinaryCompoundSERE ')') -> 'within' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{SEREOr} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '|' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREAndNLM} (left=RepeatedSERE | left=BracedSERE | '('
		//left=BinaryCompoundSERE ')') -> '&' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')') |
		//{SEREAndLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '&&' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREWithin} (left=RepeatedSERE | left=BracedSERE | '('
		//left=BinaryCompoundSERE ')') -> 'within' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SEREOr} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '|' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//{SEREOr}
		public Action getSEREOrAction_0_0() { return cSEREOrAction_0_0; }
		
		//left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')'
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//left=RepeatedSERE
		public Assignment getLeftAssignment_0_1_0() { return cLeftAssignment_0_1_0; }
		
		//RepeatedSERE
		public RuleCall getLeftRepeatedSEREParserRuleCall_0_1_0_0() { return cLeftRepeatedSEREParserRuleCall_0_1_0_0; }
		
		//left=BracedSERE
		public Assignment getLeftAssignment_0_1_1() { return cLeftAssignment_0_1_1; }
		
		//BracedSERE
		public RuleCall getLeftBracedSEREParserRuleCall_0_1_1_0() { return cLeftBracedSEREParserRuleCall_0_1_1_0; }
		
		//'(' left=BinaryCompoundSERE ')'
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_2_0() { return cLeftParenthesisKeyword_0_1_2_0; }
		
		//left=BinaryCompoundSERE
		public Assignment getLeftAssignment_0_1_2_1() { return cLeftAssignment_0_1_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getLeftBinaryCompoundSEREParserRuleCall_0_1_2_1_0() { return cLeftBinaryCompoundSEREParserRuleCall_0_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2_2() { return cRightParenthesisKeyword_0_1_2_2; }
		
		//-> '|'
		public Keyword getVerticalLineKeyword_0_2() { return cVerticalLineKeyword_0_2; }
		
		//right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')'
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }
		
		//right=RepeatedSERE
		public Assignment getRightAssignment_0_3_0() { return cRightAssignment_0_3_0; }
		
		//RepeatedSERE
		public RuleCall getRightRepeatedSEREParserRuleCall_0_3_0_0() { return cRightRepeatedSEREParserRuleCall_0_3_0_0; }
		
		//right=BracedSERE
		public Assignment getRightAssignment_0_3_1() { return cRightAssignment_0_3_1; }
		
		//BracedSERE
		public RuleCall getRightBracedSEREParserRuleCall_0_3_1_0() { return cRightBracedSEREParserRuleCall_0_3_1_0; }
		
		//'(' right=BinaryCompoundSERE ')'
		public Group getGroup_0_3_2() { return cGroup_0_3_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3_2_0() { return cLeftParenthesisKeyword_0_3_2_0; }
		
		//right=BinaryCompoundSERE
		public Assignment getRightAssignment_0_3_2_1() { return cRightAssignment_0_3_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getRightBinaryCompoundSEREParserRuleCall_0_3_2_1_0() { return cRightBinaryCompoundSEREParserRuleCall_0_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3_2_2() { return cRightParenthesisKeyword_0_3_2_2; }
		
		//{SEREAndNLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '&' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//{SEREAndNLM}
		public Action getSEREAndNLMAction_1_0() { return cSEREAndNLMAction_1_0; }
		
		//left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//left=RepeatedSERE
		public Assignment getLeftAssignment_1_1_0() { return cLeftAssignment_1_1_0; }
		
		//RepeatedSERE
		public RuleCall getLeftRepeatedSEREParserRuleCall_1_1_0_0() { return cLeftRepeatedSEREParserRuleCall_1_1_0_0; }
		
		//left=BracedSERE
		public Assignment getLeftAssignment_1_1_1() { return cLeftAssignment_1_1_1; }
		
		//BracedSERE
		public RuleCall getLeftBracedSEREParserRuleCall_1_1_1_0() { return cLeftBracedSEREParserRuleCall_1_1_1_0; }
		
		//'(' left=BinaryCompoundSERE ')'
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_2_0() { return cLeftParenthesisKeyword_1_1_2_0; }
		
		//left=BinaryCompoundSERE
		public Assignment getLeftAssignment_1_1_2_1() { return cLeftAssignment_1_1_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getLeftBinaryCompoundSEREParserRuleCall_1_1_2_1_0() { return cLeftBinaryCompoundSEREParserRuleCall_1_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2_2() { return cRightParenthesisKeyword_1_1_2_2; }
		
		//-> '&'
		public Keyword getAmpersandKeyword_1_2() { return cAmpersandKeyword_1_2; }
		
		//right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')'
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//right=RepeatedSERE
		public Assignment getRightAssignment_1_3_0() { return cRightAssignment_1_3_0; }
		
		//RepeatedSERE
		public RuleCall getRightRepeatedSEREParserRuleCall_1_3_0_0() { return cRightRepeatedSEREParserRuleCall_1_3_0_0; }
		
		//right=BracedSERE
		public Assignment getRightAssignment_1_3_1() { return cRightAssignment_1_3_1; }
		
		//BracedSERE
		public RuleCall getRightBracedSEREParserRuleCall_1_3_1_0() { return cRightBracedSEREParserRuleCall_1_3_1_0; }
		
		//'(' right=BinaryCompoundSERE ')'
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3_2_0() { return cLeftParenthesisKeyword_1_3_2_0; }
		
		//right=BinaryCompoundSERE
		public Assignment getRightAssignment_1_3_2_1() { return cRightAssignment_1_3_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getRightBinaryCompoundSEREParserRuleCall_1_3_2_1_0() { return cRightBinaryCompoundSEREParserRuleCall_1_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_2_2() { return cRightParenthesisKeyword_1_3_2_2; }
		
		//{SEREAndLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '&&' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Group getGroup_2() { return cGroup_2; }
		
		//{SEREAndLM}
		public Action getSEREAndLMAction_2_0() { return cSEREAndLMAction_2_0; }
		
		//left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')'
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//left=RepeatedSERE
		public Assignment getLeftAssignment_2_1_0() { return cLeftAssignment_2_1_0; }
		
		//RepeatedSERE
		public RuleCall getLeftRepeatedSEREParserRuleCall_2_1_0_0() { return cLeftRepeatedSEREParserRuleCall_2_1_0_0; }
		
		//left=BracedSERE
		public Assignment getLeftAssignment_2_1_1() { return cLeftAssignment_2_1_1; }
		
		//BracedSERE
		public RuleCall getLeftBracedSEREParserRuleCall_2_1_1_0() { return cLeftBracedSEREParserRuleCall_2_1_1_0; }
		
		//'(' left=BinaryCompoundSERE ')'
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_2_0() { return cLeftParenthesisKeyword_2_1_2_0; }
		
		//left=BinaryCompoundSERE
		public Assignment getLeftAssignment_2_1_2_1() { return cLeftAssignment_2_1_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getLeftBinaryCompoundSEREParserRuleCall_2_1_2_1_0() { return cLeftBinaryCompoundSEREParserRuleCall_2_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2_2() { return cRightParenthesisKeyword_2_1_2_2; }
		
		//-> '&&'
		public Keyword getAmpersandAmpersandKeyword_2_2() { return cAmpersandAmpersandKeyword_2_2; }
		
		//right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')'
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }
		
		//right=RepeatedSERE
		public Assignment getRightAssignment_2_3_0() { return cRightAssignment_2_3_0; }
		
		//RepeatedSERE
		public RuleCall getRightRepeatedSEREParserRuleCall_2_3_0_0() { return cRightRepeatedSEREParserRuleCall_2_3_0_0; }
		
		//right=BracedSERE
		public Assignment getRightAssignment_2_3_1() { return cRightAssignment_2_3_1; }
		
		//BracedSERE
		public RuleCall getRightBracedSEREParserRuleCall_2_3_1_0() { return cRightBracedSEREParserRuleCall_2_3_1_0; }
		
		//'(' right=BinaryCompoundSERE ')'
		public Group getGroup_2_3_2() { return cGroup_2_3_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_3_2_0() { return cLeftParenthesisKeyword_2_3_2_0; }
		
		//right=BinaryCompoundSERE
		public Assignment getRightAssignment_2_3_2_1() { return cRightAssignment_2_3_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getRightBinaryCompoundSEREParserRuleCall_2_3_2_1_0() { return cRightBinaryCompoundSEREParserRuleCall_2_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3_2_2() { return cRightParenthesisKeyword_2_3_2_2; }
		
		//{SEREWithin} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> 'within' (right=RepeatedSERE |
		//right=BracedSERE | '(' right=BinaryCompoundSERE ')')
		public Group getGroup_3() { return cGroup_3; }
		
		//{SEREWithin}
		public Action getSEREWithinAction_3_0() { return cSEREWithinAction_3_0; }
		
		//left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')'
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//left=RepeatedSERE
		public Assignment getLeftAssignment_3_1_0() { return cLeftAssignment_3_1_0; }
		
		//RepeatedSERE
		public RuleCall getLeftRepeatedSEREParserRuleCall_3_1_0_0() { return cLeftRepeatedSEREParserRuleCall_3_1_0_0; }
		
		//left=BracedSERE
		public Assignment getLeftAssignment_3_1_1() { return cLeftAssignment_3_1_1; }
		
		//BracedSERE
		public RuleCall getLeftBracedSEREParserRuleCall_3_1_1_0() { return cLeftBracedSEREParserRuleCall_3_1_1_0; }
		
		//'(' left=BinaryCompoundSERE ')'
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_2_0() { return cLeftParenthesisKeyword_3_1_2_0; }
		
		//left=BinaryCompoundSERE
		public Assignment getLeftAssignment_3_1_2_1() { return cLeftAssignment_3_1_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getLeftBinaryCompoundSEREParserRuleCall_3_1_2_1_0() { return cLeftBinaryCompoundSEREParserRuleCall_3_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_2_2() { return cRightParenthesisKeyword_3_1_2_2; }
		
		//-> 'within'
		public Keyword getWithinKeyword_3_2() { return cWithinKeyword_3_2; }
		
		//right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')'
		public Alternatives getAlternatives_3_3() { return cAlternatives_3_3; }
		
		//right=RepeatedSERE
		public Assignment getRightAssignment_3_3_0() { return cRightAssignment_3_3_0; }
		
		//RepeatedSERE
		public RuleCall getRightRepeatedSEREParserRuleCall_3_3_0_0() { return cRightRepeatedSEREParserRuleCall_3_3_0_0; }
		
		//right=BracedSERE
		public Assignment getRightAssignment_3_3_1() { return cRightAssignment_3_3_1; }
		
		//BracedSERE
		public RuleCall getRightBracedSEREParserRuleCall_3_3_1_0() { return cRightBracedSEREParserRuleCall_3_3_1_0; }
		
		//'(' right=BinaryCompoundSERE ')'
		public Group getGroup_3_3_2() { return cGroup_3_3_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_3_2_0() { return cLeftParenthesisKeyword_3_3_2_0; }
		
		//right=BinaryCompoundSERE
		public Assignment getRightAssignment_3_3_2_1() { return cRightAssignment_3_3_2_1; }
		
		//BinaryCompoundSERE
		public RuleCall getRightBinaryCompoundSEREParserRuleCall_3_3_2_1_0() { return cRightBinaryCompoundSEREParserRuleCall_3_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3_2_2() { return cRightParenthesisKeyword_3_3_2_2; }
	}
	public class CountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.Count");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCOUNTAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCOUNTNUMBERParserRuleCall_0_0 = (RuleCall)cCOUNTAssignment_0.eContents().get(0);
		private final RuleCall cRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Count:
		//	COUNT=NUMBER | Range;
		@Override public ParserRule getRule() { return rule; }
		
		//COUNT=NUMBER | Range
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COUNT=NUMBER
		public Assignment getCOUNTAssignment_0() { return cCOUNTAssignment_0; }
		
		//NUMBER
		public RuleCall getCOUNTNUMBERParserRuleCall_0_0() { return cCOUNTNUMBERParserRuleCall_0_0; }
		
		//Range
		public RuleCall getRangeParserRuleCall_1() { return cRangeParserRuleCall_1; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLOWER_BOUNDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLOWER_BOUNDNUMBERParserRuleCall_0_0 = (RuleCall)cLOWER_BOUNDAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHIGHER_BOUNDAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHIGHER_BOUNDNUMBERParserRuleCall_2_0 = (RuleCall)cHIGHER_BOUNDAssignment_2.eContents().get(0);
		
		//Range:
		//	LOWER_BOUND=NUMBER ':' HIGHER_BOUND=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//LOWER_BOUND=NUMBER ':' HIGHER_BOUND=NUMBER
		public Group getGroup() { return cGroup; }
		
		//LOWER_BOUND=NUMBER
		public Assignment getLOWER_BOUNDAssignment_0() { return cLOWER_BOUNDAssignment_0; }
		
		//NUMBER
		public RuleCall getLOWER_BOUNDNUMBERParserRuleCall_0_0() { return cLOWER_BOUNDNUMBERParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//HIGHER_BOUND=NUMBER
		public Assignment getHIGHER_BOUNDAssignment_2() { return cHIGHER_BOUNDAssignment_2; }
		
		//NUMBER
		public RuleCall getHIGHER_BOUNDNUMBERParserRuleCall_2_0() { return cHIGHER_BOUNDNUMBERParserRuleCall_2_0; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.NUMBER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NUMBER ecore::EInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.sequence.cs.SequenceCS.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final SEREElements pSERE;
	private final SimpleSEREElements pSimpleSERE;
	private final SequenceTerminalElements pSequenceTerminal;
	private final SequenceElements pSequence;
	private final RepeatedSEREElements pRepeatedSERE;
	private final BracedSEREElements pBracedSERE;
	private final CompoundSEREElements pCompoundSERE;
	private final BinaryCompoundSEREElements pBinaryCompoundSERE;
	private final CountElements pCount;
	private final RangeElements pRange;
	private final NUMBERElements pNUMBER;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SequenceCSGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSERE = new SEREElements();
		this.pSimpleSERE = new SimpleSEREElements();
		this.pSequenceTerminal = new SequenceTerminalElements();
		this.pSequence = new SequenceElements();
		this.pRepeatedSERE = new RepeatedSEREElements();
		this.pBracedSERE = new BracedSEREElements();
		this.pCompoundSERE = new CompoundSEREElements();
		this.pBinaryCompoundSERE = new BinaryCompoundSEREElements();
		this.pCount = new CountElements();
		this.pRange = new RangeElements();
		this.pNUMBER = new NUMBERElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.tetrabox.sequence.cs.SequenceCS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SERE:
	//	SimpleSERE (':' {FusionSERE.left=current} right=SERE | ';' {ConcatenationSERE.left=current} right=SERE);
	public SEREElements getSEREAccess() {
		return pSERE;
	}
	
	public ParserRule getSERERule() {
		return getSEREAccess().getRule();
	}
	
	//SimpleSERE:
	//	SequenceTerminal
	//	| Sequence
	//	| CompoundSERE;
	public SimpleSEREElements getSimpleSEREAccess() {
		return pSimpleSERE;
	}
	
	public ParserRule getSimpleSERERule() {
		return getSimpleSEREAccess().getRule();
	}
	
	//SequenceTerminal:
	//	{NotSequenceTerminal} 'not' literal=SequenceTerminal
	//	| {BooleanLiteral} (literal?='true' | 'false') | {OCLExpression} 'ocl' expression=STRING;
	public SequenceTerminalElements getSequenceTerminalAccess() {
		return pSequenceTerminal;
	}
	
	public ParserRule getSequenceTerminalRule() {
		return getSequenceTerminalAccess().getRule();
	}
	
	//Sequence:
	//	BracedSERE | RepeatedSERE;
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}
	
	//RepeatedSERE:
	//	{BooleanCountedConsecutiveRepetition} expression=SequenceTerminal (=> '[' '*') count=Count? ']'
	//	| {SequenceCountedConsecutiveRepetition} expression=BracedSERE (=> '[' '*') count=Count? ']'
	//	| {SequenceCountedConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '*') count=Count? ']'
	//	| {BooleanConsecutiveRepetition} expression=SequenceTerminal (=> '[' '+') ']'
	//	| {SequenceConsecutiveRepetition} expression=BracedSERE (=> '[' '+') ']'
	//	| {SequenceConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '+') ']'
	//	| {BooleanCountedNonConsecutiveRepetition} expression=SequenceTerminal (=> '[' '=') count=Count ']'
	//	| {BooleanCountedGotoRepetition} expression=SequenceTerminal (=> '[' '->') count=Count? ']'
	//	| {WildCard} '[' '*' count=Count? ']'
	//	| {LengthOne} '[' '+' ']';
	public RepeatedSEREElements getRepeatedSEREAccess() {
		return pRepeatedSERE;
	}
	
	public ParserRule getRepeatedSERERule() {
		return getRepeatedSEREAccess().getRule();
	}
	
	//BracedSERE:
	//	'{' expression=SERE '}';
	public BracedSEREElements getBracedSEREAccess() {
		return pBracedSERE;
	}
	
	public ParserRule getBracedSERERule() {
		return getBracedSEREAccess().getRule();
	}
	
	//CompoundSERE:
	//	RepeatedSERE
	//	| BracedSERE
	//	| BinaryCompoundSERE;
	public CompoundSEREElements getCompoundSEREAccess() {
		return pCompoundSERE;
	}
	
	public ParserRule getCompoundSERERule() {
		return getCompoundSEREAccess().getRule();
	}
	
	//BinaryCompoundSERE:
	//	{SEREOr} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '|' (right=RepeatedSERE |
	//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREAndNLM} (left=RepeatedSERE | left=BracedSERE | '('
	//	left=BinaryCompoundSERE ')') -> '&' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')') |
	//	{SEREAndLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '&&' (right=RepeatedSERE |
	//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREWithin} (left=RepeatedSERE | left=BracedSERE | '('
	//	left=BinaryCompoundSERE ')') -> 'within' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')');
	public BinaryCompoundSEREElements getBinaryCompoundSEREAccess() {
		return pBinaryCompoundSERE;
	}
	
	public ParserRule getBinaryCompoundSERERule() {
		return getBinaryCompoundSEREAccess().getRule();
	}
	
	//Count:
	//	COUNT=NUMBER | Range;
	public CountElements getCountAccess() {
		return pCount;
	}
	
	public ParserRule getCountRule() {
		return getCountAccess().getRule();
	}
	
	//Range:
	//	LOWER_BOUND=NUMBER ':' HIGHER_BOUND=NUMBER;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//NUMBER ecore::EInt:
	//	INT;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

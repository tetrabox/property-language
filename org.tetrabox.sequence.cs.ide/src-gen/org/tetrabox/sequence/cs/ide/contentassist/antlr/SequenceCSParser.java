/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.sequence.cs.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.tetrabox.sequence.cs.ide.contentassist.antlr.internal.InternalSequenceCSParser;
import org.tetrabox.sequence.cs.services.SequenceCSGrammarAccess;

public class SequenceCSParser extends AbstractContentAssistParser {

	@Inject
	private SequenceCSGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSequenceCSParser createParser() {
		InternalSequenceCSParser result = new InternalSequenceCSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSEREAccess().getAlternatives_1(), "rule__SERE__Alternatives_1");
					put(grammarAccess.getSimpleSEREAccess().getAlternatives(), "rule__SimpleSERE__Alternatives");
					put(grammarAccess.getSequenceTerminalAccess().getAlternatives(), "rule__SequenceTerminal__Alternatives");
					put(grammarAccess.getSequenceTerminalAccess().getAlternatives_1_1(), "rule__SequenceTerminal__Alternatives_1_1");
					put(grammarAccess.getSequenceAccess().getAlternatives(), "rule__Sequence__Alternatives");
					put(grammarAccess.getRepeatedSEREAccess().getAlternatives(), "rule__RepeatedSERE__Alternatives");
					put(grammarAccess.getCompoundSEREAccess().getAlternatives(), "rule__CompoundSERE__Alternatives");
					put(grammarAccess.getBinaryCompoundSEREAccess().getAlternatives(), "rule__BinaryCompoundSERE__Alternatives");
					put(grammarAccess.getBinaryCompoundSEREAccess().getAlternatives_0_1(), "rule__BinaryCompoundSERE__Alternatives_0_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getAlternatives_0_3(), "rule__BinaryCompoundSERE__Alternatives_0_3");
					put(grammarAccess.getBinaryCompoundSEREAccess().getAlternatives_1_1(), "rule__BinaryCompoundSERE__Alternatives_1_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getAlternatives_1_3(), "rule__BinaryCompoundSERE__Alternatives_1_3");
					put(grammarAccess.getBinaryCompoundSEREAccess().getAlternatives_2_1(), "rule__BinaryCompoundSERE__Alternatives_2_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getAlternatives_2_3(), "rule__BinaryCompoundSERE__Alternatives_2_3");
					put(grammarAccess.getBinaryCompoundSEREAccess().getAlternatives_3_1(), "rule__BinaryCompoundSERE__Alternatives_3_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getAlternatives_3_3(), "rule__BinaryCompoundSERE__Alternatives_3_3");
					put(grammarAccess.getCountAccess().getAlternatives(), "rule__Count__Alternatives");
					put(grammarAccess.getSEREAccess().getGroup(), "rule__SERE__Group__0");
					put(grammarAccess.getSEREAccess().getGroup_1_0(), "rule__SERE__Group_1_0__0");
					put(grammarAccess.getSEREAccess().getGroup_1_1(), "rule__SERE__Group_1_1__0");
					put(grammarAccess.getSequenceTerminalAccess().getGroup_0(), "rule__SequenceTerminal__Group_0__0");
					put(grammarAccess.getSequenceTerminalAccess().getGroup_1(), "rule__SequenceTerminal__Group_1__0");
					put(grammarAccess.getSequenceTerminalAccess().getGroup_2(), "rule__SequenceTerminal__Group_2__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_0(), "rule__RepeatedSERE__Group_0__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_0_2(), "rule__RepeatedSERE__Group_0_2__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_1(), "rule__RepeatedSERE__Group_1__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_1_2(), "rule__RepeatedSERE__Group_1_2__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_2(), "rule__RepeatedSERE__Group_2__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_2_4(), "rule__RepeatedSERE__Group_2_4__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_3(), "rule__RepeatedSERE__Group_3__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_3_2(), "rule__RepeatedSERE__Group_3_2__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_4(), "rule__RepeatedSERE__Group_4__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_4_2(), "rule__RepeatedSERE__Group_4_2__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_5(), "rule__RepeatedSERE__Group_5__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_5_4(), "rule__RepeatedSERE__Group_5_4__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_6(), "rule__RepeatedSERE__Group_6__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_6_2(), "rule__RepeatedSERE__Group_6_2__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_7(), "rule__RepeatedSERE__Group_7__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_7_2(), "rule__RepeatedSERE__Group_7_2__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_8(), "rule__RepeatedSERE__Group_8__0");
					put(grammarAccess.getRepeatedSEREAccess().getGroup_9(), "rule__RepeatedSERE__Group_9__0");
					put(grammarAccess.getBracedSEREAccess().getGroup(), "rule__BracedSERE__Group__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_0(), "rule__BinaryCompoundSERE__Group_0__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_0_1_2(), "rule__BinaryCompoundSERE__Group_0_1_2__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_0_3_2(), "rule__BinaryCompoundSERE__Group_0_3_2__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_1(), "rule__BinaryCompoundSERE__Group_1__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_1_1_2(), "rule__BinaryCompoundSERE__Group_1_1_2__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_1_3_2(), "rule__BinaryCompoundSERE__Group_1_3_2__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_2(), "rule__BinaryCompoundSERE__Group_2__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_2_1_2(), "rule__BinaryCompoundSERE__Group_2_1_2__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_2_3_2(), "rule__BinaryCompoundSERE__Group_2_3_2__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_3(), "rule__BinaryCompoundSERE__Group_3__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_3_1_2(), "rule__BinaryCompoundSERE__Group_3_1_2__0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getGroup_3_3_2(), "rule__BinaryCompoundSERE__Group_3_3_2__0");
					put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getSEREAccess().getRightAssignment_1_0_2(), "rule__SERE__RightAssignment_1_0_2");
					put(grammarAccess.getSEREAccess().getRightAssignment_1_1_2(), "rule__SERE__RightAssignment_1_1_2");
					put(grammarAccess.getSequenceTerminalAccess().getLiteralAssignment_0_2(), "rule__SequenceTerminal__LiteralAssignment_0_2");
					put(grammarAccess.getSequenceTerminalAccess().getLiteralAssignment_1_1_0(), "rule__SequenceTerminal__LiteralAssignment_1_1_0");
					put(grammarAccess.getSequenceTerminalAccess().getExpressionAssignment_2_2(), "rule__SequenceTerminal__ExpressionAssignment_2_2");
					put(grammarAccess.getRepeatedSEREAccess().getExpressionAssignment_0_1(), "rule__RepeatedSERE__ExpressionAssignment_0_1");
					put(grammarAccess.getRepeatedSEREAccess().getCountAssignment_0_3(), "rule__RepeatedSERE__CountAssignment_0_3");
					put(grammarAccess.getRepeatedSEREAccess().getExpressionAssignment_1_1(), "rule__RepeatedSERE__ExpressionAssignment_1_1");
					put(grammarAccess.getRepeatedSEREAccess().getCountAssignment_1_3(), "rule__RepeatedSERE__CountAssignment_1_3");
					put(grammarAccess.getRepeatedSEREAccess().getExpressionAssignment_2_2(), "rule__RepeatedSERE__ExpressionAssignment_2_2");
					put(grammarAccess.getRepeatedSEREAccess().getCountAssignment_2_5(), "rule__RepeatedSERE__CountAssignment_2_5");
					put(grammarAccess.getRepeatedSEREAccess().getExpressionAssignment_3_1(), "rule__RepeatedSERE__ExpressionAssignment_3_1");
					put(grammarAccess.getRepeatedSEREAccess().getExpressionAssignment_4_1(), "rule__RepeatedSERE__ExpressionAssignment_4_1");
					put(grammarAccess.getRepeatedSEREAccess().getExpressionAssignment_5_2(), "rule__RepeatedSERE__ExpressionAssignment_5_2");
					put(grammarAccess.getRepeatedSEREAccess().getExpressionAssignment_6_1(), "rule__RepeatedSERE__ExpressionAssignment_6_1");
					put(grammarAccess.getRepeatedSEREAccess().getCountAssignment_6_3(), "rule__RepeatedSERE__CountAssignment_6_3");
					put(grammarAccess.getRepeatedSEREAccess().getExpressionAssignment_7_1(), "rule__RepeatedSERE__ExpressionAssignment_7_1");
					put(grammarAccess.getRepeatedSEREAccess().getCountAssignment_7_3(), "rule__RepeatedSERE__CountAssignment_7_3");
					put(grammarAccess.getRepeatedSEREAccess().getCountAssignment_8_3(), "rule__RepeatedSERE__CountAssignment_8_3");
					put(grammarAccess.getBracedSEREAccess().getExpressionAssignment_1(), "rule__BracedSERE__ExpressionAssignment_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_0_1_0(), "rule__BinaryCompoundSERE__LeftAssignment_0_1_0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_0_1_1(), "rule__BinaryCompoundSERE__LeftAssignment_0_1_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_0_1_2_1(), "rule__BinaryCompoundSERE__LeftAssignment_0_1_2_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_0_3_0(), "rule__BinaryCompoundSERE__RightAssignment_0_3_0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_0_3_1(), "rule__BinaryCompoundSERE__RightAssignment_0_3_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_0_3_2_1(), "rule__BinaryCompoundSERE__RightAssignment_0_3_2_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_1_1_0(), "rule__BinaryCompoundSERE__LeftAssignment_1_1_0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_1_1_1(), "rule__BinaryCompoundSERE__LeftAssignment_1_1_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_1_1_2_1(), "rule__BinaryCompoundSERE__LeftAssignment_1_1_2_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_1_3_0(), "rule__BinaryCompoundSERE__RightAssignment_1_3_0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_1_3_1(), "rule__BinaryCompoundSERE__RightAssignment_1_3_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_1_3_2_1(), "rule__BinaryCompoundSERE__RightAssignment_1_3_2_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_2_1_0(), "rule__BinaryCompoundSERE__LeftAssignment_2_1_0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_2_1_1(), "rule__BinaryCompoundSERE__LeftAssignment_2_1_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_2_1_2_1(), "rule__BinaryCompoundSERE__LeftAssignment_2_1_2_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_2_3_0(), "rule__BinaryCompoundSERE__RightAssignment_2_3_0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_2_3_1(), "rule__BinaryCompoundSERE__RightAssignment_2_3_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_2_3_2_1(), "rule__BinaryCompoundSERE__RightAssignment_2_3_2_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_3_1_0(), "rule__BinaryCompoundSERE__LeftAssignment_3_1_0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_3_1_1(), "rule__BinaryCompoundSERE__LeftAssignment_3_1_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getLeftAssignment_3_1_2_1(), "rule__BinaryCompoundSERE__LeftAssignment_3_1_2_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_3_3_0(), "rule__BinaryCompoundSERE__RightAssignment_3_3_0");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_3_3_1(), "rule__BinaryCompoundSERE__RightAssignment_3_3_1");
					put(grammarAccess.getBinaryCompoundSEREAccess().getRightAssignment_3_3_2_1(), "rule__BinaryCompoundSERE__RightAssignment_3_3_2_1");
					put(grammarAccess.getCountAccess().getCOUNTAssignment_0(), "rule__Count__COUNTAssignment_0");
					put(grammarAccess.getRangeAccess().getLOWER_BOUNDAssignment_0(), "rule__Range__LOWER_BOUNDAssignment_0");
					put(grammarAccess.getRangeAccess().getHIGHER_BOUNDAssignment_2(), "rule__Range__HIGHER_BOUNDAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SequenceCSGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SequenceCSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

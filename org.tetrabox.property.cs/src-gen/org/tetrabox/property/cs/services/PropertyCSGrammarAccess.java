/*
 * generated by Xtext 2.12.0
 */
package org.tetrabox.property.cs.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.tetrabox.sequence.cs.services.SequenceCSGrammarAccess;

@Singleton
public class PropertyCSGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.property.cs.PropertyCS.Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOwnedImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOwnedImportsImportParserRuleCall_0_0 = (RuleCall)cOwnedImportsAssignment_0.eContents().get(0);
		private final Assignment cOwnedPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPropertiesPropertyParserRuleCall_1_0 = (RuleCall)cOwnedPropertiesAssignment_1.eContents().get(0);
		
		//Document:
		//	ownedImports+=Import*
		//	ownedProperties+=Property+;
		@Override public ParserRule getRule() { return rule; }
		
		//ownedImports+=Import* ownedProperties+=Property+
		public Group getGroup() { return cGroup; }
		
		//ownedImports+=Import*
		public Assignment getOwnedImportsAssignment_0() { return cOwnedImportsAssignment_0; }
		
		//Import
		public RuleCall getOwnedImportsImportParserRuleCall_0_0() { return cOwnedImportsImportParserRuleCall_0_0; }
		
		//ownedProperties+=Property+
		public Assignment getOwnedPropertiesAssignment_1() { return cOwnedPropertiesAssignment_1; }
		
		//Property
		public RuleCall getOwnedPropertiesPropertyParserRuleCall_1_0() { return cOwnedPropertiesPropertyParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.property.cs.PropertyCS.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIIMPORT_URITerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importURI=IMPORT_URI;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=IMPORT_URI
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=IMPORT_URI
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//IMPORT_URI
		public RuleCall getImportURIIMPORT_URITerminalRuleCall_1_0() { return cImportURIIMPORT_URITerminalRuleCall_1_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.property.cs.PropertyCS.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAndPropertyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cLeftAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_0_1_0_0 = (RuleCall)cLeftAssignment_0_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_0_1_1_0 = (RuleCall)cLeftAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_0_1_2_1_0 = (RuleCall)cLeftAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2_2 = (Keyword)cGroup_0_1_2.eContents().get(2);
		private final Group cGroup_0_1_3 = (Group)cAlternatives_0_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cLeftAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_0_1_3_1_0 = (RuleCall)cLeftAssignment_0_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3_2 = (Keyword)cGroup_0_1_3.eContents().get(2);
		private final Keyword cAndKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRightAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_0_3_0 = (RuleCall)cRightAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOrPropertyBooleanPropertyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_1_1_0_0 = (RuleCall)cLeftAssignment_1_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_1_1_1_0 = (RuleCall)cLeftAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_1_1_2_1_0 = (RuleCall)cLeftAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		private final Group cGroup_1_1_3 = (Group)cAlternatives_1_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cLeftAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_1_1_3_1_0 = (RuleCall)cLeftAssignment_1_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_2 = (Keyword)cGroup_1_1_3.eContents().get(2);
		private final Keyword cOrKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAbortPropertyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cLeftAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_2_1_0_0 = (RuleCall)cLeftAssignment_2_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_2_1_1_0 = (RuleCall)cLeftAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_2_1_2_1_0 = (RuleCall)cLeftAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2_2 = (Keyword)cGroup_2_1_2.eContents().get(2);
		private final Group cGroup_2_1_3 = (Group)cAlternatives_2_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Assignment cLeftAssignment_2_1_3_1 = (Assignment)cGroup_2_1_3.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_2_1_3_1_0 = (RuleCall)cLeftAssignment_2_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3_2 = (Keyword)cGroup_2_1_3.eContents().get(2);
		private final Keyword cAbortKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRightSequenceTerminalParserRuleCall_2_3_0 = (RuleCall)cRightAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cUntilPropertyAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cLeftAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_3_1_0_0 = (RuleCall)cLeftAssignment_3_1_0.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_3_1_1_0 = (RuleCall)cLeftAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cLeftUnaryPropertyParserRuleCall_3_1_2_1_0 = (RuleCall)cLeftAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2_2 = (Keyword)cGroup_3_1_2.eContents().get(2);
		private final Group cGroup_3_1_3 = (Group)cAlternatives_3_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cLeftAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cLeftBinaryPropertyParserRuleCall_3_1_3_1_0 = (RuleCall)cLeftAssignment_3_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_3_2 = (Keyword)cGroup_3_1_3.eContents().get(2);
		private final Keyword cUntilKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cRightAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cRightSequenceTerminalParserRuleCall_3_3_0 = (RuleCall)cRightAssignment_3_3.eContents().get(0);
		private final RuleCall cUnaryPropertyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBinaryPropertyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cUnaryPropertyParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cBinaryPropertyParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//Property:
		//	{AndProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->
		//	'and' right=Property
		//	| {OrPropertyBooleanProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '('
		//	left=BinaryProperty ')') -> 'or' right=Property
		//	| {AbortProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty
		//	')') -> 'abort' right=SequenceTerminal
		//	| {UntilProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty
		//	')') -> 'until' right=SequenceTerminal
		//	| UnaryProperty | BinaryProperty | '(' UnaryProperty ')' | '(' BinaryProperty ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{AndProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->
		//'and' right=Property | {OrPropertyBooleanProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty
		//')' | '(' left=BinaryProperty ')') -> 'or' right=Property | {AbortProperty} (left=UnaryProperty | left=BinaryProperty |
		//'(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') -> 'abort' right=SequenceTerminal | {UntilProperty}
		//(left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') -> 'until'
		//right=SequenceTerminal | UnaryProperty | BinaryProperty | '(' UnaryProperty ')' | '(' BinaryProperty ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AndProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->
		//'and' right=Property
		public Group getGroup_0() { return cGroup_0; }
		
		//{AndProperty}
		public Action getAndPropertyAction_0_0() { return cAndPropertyAction_0_0; }
		
		//left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')'
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_0_1_0() { return cLeftAssignment_0_1_0; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_0_1_0_0() { return cLeftUnaryPropertyParserRuleCall_0_1_0_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_0_1_1() { return cLeftAssignment_0_1_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_0_1_1_0() { return cLeftBinaryPropertyParserRuleCall_0_1_1_0; }
		
		//'(' left=UnaryProperty ')'
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_2_0() { return cLeftParenthesisKeyword_0_1_2_0; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_0_1_2_1() { return cLeftAssignment_0_1_2_1; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_0_1_2_1_0() { return cLeftUnaryPropertyParserRuleCall_0_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2_2() { return cRightParenthesisKeyword_0_1_2_2; }
		
		//'(' left=BinaryProperty ')'
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_3_0() { return cLeftParenthesisKeyword_0_1_3_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_0_1_3_1() { return cLeftAssignment_0_1_3_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_0_1_3_1_0() { return cLeftBinaryPropertyParserRuleCall_0_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_3_2() { return cRightParenthesisKeyword_0_1_3_2; }
		
		//-> 'and'
		public Keyword getAndKeyword_0_2() { return cAndKeyword_0_2; }
		
		//right=Property
		public Assignment getRightAssignment_0_3() { return cRightAssignment_0_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_0_3_0() { return cRightPropertyParserRuleCall_0_3_0; }
		
		//{OrPropertyBooleanProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '('
		//left=BinaryProperty ')') -> 'or' right=Property
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrPropertyBooleanProperty}
		public Action getOrPropertyBooleanPropertyAction_1_0() { return cOrPropertyBooleanPropertyAction_1_0; }
		
		//left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_1_1_0() { return cLeftAssignment_1_1_0; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_1_1_0_0() { return cLeftUnaryPropertyParserRuleCall_1_1_0_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_1_1_1() { return cLeftAssignment_1_1_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_1_1_1_0() { return cLeftBinaryPropertyParserRuleCall_1_1_1_0; }
		
		//'(' left=UnaryProperty ')'
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_2_0() { return cLeftParenthesisKeyword_1_1_2_0; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_1_1_2_1() { return cLeftAssignment_1_1_2_1; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_1_1_2_1_0() { return cLeftUnaryPropertyParserRuleCall_1_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2_2() { return cRightParenthesisKeyword_1_1_2_2; }
		
		//'(' left=BinaryProperty ')'
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_3_0() { return cLeftParenthesisKeyword_1_1_3_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_1_1_3_1() { return cLeftAssignment_1_1_3_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_1_1_3_1_0() { return cLeftBinaryPropertyParserRuleCall_1_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_3_2() { return cRightParenthesisKeyword_1_1_3_2; }
		
		//-> 'or'
		public Keyword getOrKeyword_1_2() { return cOrKeyword_1_2; }
		
		//right=Property
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_1_3_0() { return cRightPropertyParserRuleCall_1_3_0; }
		
		//{AbortProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->
		//'abort' right=SequenceTerminal
		public Group getGroup_2() { return cGroup_2; }
		
		//{AbortProperty}
		public Action getAbortPropertyAction_2_0() { return cAbortPropertyAction_2_0; }
		
		//left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')'
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_2_1_0() { return cLeftAssignment_2_1_0; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_2_1_0_0() { return cLeftUnaryPropertyParserRuleCall_2_1_0_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_2_1_1() { return cLeftAssignment_2_1_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_2_1_1_0() { return cLeftBinaryPropertyParserRuleCall_2_1_1_0; }
		
		//'(' left=UnaryProperty ')'
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_2_0() { return cLeftParenthesisKeyword_2_1_2_0; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_2_1_2_1() { return cLeftAssignment_2_1_2_1; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_2_1_2_1_0() { return cLeftUnaryPropertyParserRuleCall_2_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2_2() { return cRightParenthesisKeyword_2_1_2_2; }
		
		//'(' left=BinaryProperty ')'
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_3_0() { return cLeftParenthesisKeyword_2_1_3_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_2_1_3_1() { return cLeftAssignment_2_1_3_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_2_1_3_1_0() { return cLeftBinaryPropertyParserRuleCall_2_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_3_2() { return cRightParenthesisKeyword_2_1_3_2; }
		
		//-> 'abort'
		public Keyword getAbortKeyword_2_2() { return cAbortKeyword_2_2; }
		
		//right=SequenceTerminal
		public Assignment getRightAssignment_2_3() { return cRightAssignment_2_3; }
		
		//SequenceTerminal
		public RuleCall getRightSequenceTerminalParserRuleCall_2_3_0() { return cRightSequenceTerminalParserRuleCall_2_3_0; }
		
		//{UntilProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->
		//'until' right=SequenceTerminal
		public Group getGroup_3() { return cGroup_3; }
		
		//{UntilProperty}
		public Action getUntilPropertyAction_3_0() { return cUntilPropertyAction_3_0; }
		
		//left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')'
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_3_1_0() { return cLeftAssignment_3_1_0; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_3_1_0_0() { return cLeftUnaryPropertyParserRuleCall_3_1_0_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_3_1_1() { return cLeftAssignment_3_1_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_3_1_1_0() { return cLeftBinaryPropertyParserRuleCall_3_1_1_0; }
		
		//'(' left=UnaryProperty ')'
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_2_0() { return cLeftParenthesisKeyword_3_1_2_0; }
		
		//left=UnaryProperty
		public Assignment getLeftAssignment_3_1_2_1() { return cLeftAssignment_3_1_2_1; }
		
		//UnaryProperty
		public RuleCall getLeftUnaryPropertyParserRuleCall_3_1_2_1_0() { return cLeftUnaryPropertyParserRuleCall_3_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_2_2() { return cRightParenthesisKeyword_3_1_2_2; }
		
		//'(' left=BinaryProperty ')'
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_3_0() { return cLeftParenthesisKeyword_3_1_3_0; }
		
		//left=BinaryProperty
		public Assignment getLeftAssignment_3_1_3_1() { return cLeftAssignment_3_1_3_1; }
		
		//BinaryProperty
		public RuleCall getLeftBinaryPropertyParserRuleCall_3_1_3_1_0() { return cLeftBinaryPropertyParserRuleCall_3_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_3_2() { return cRightParenthesisKeyword_3_1_3_2; }
		
		//-> 'until'
		public Keyword getUntilKeyword_3_2() { return cUntilKeyword_3_2; }
		
		//right=SequenceTerminal
		public Assignment getRightAssignment_3_3() { return cRightAssignment_3_3; }
		
		//SequenceTerminal
		public RuleCall getRightSequenceTerminalParserRuleCall_3_3_0() { return cRightSequenceTerminalParserRuleCall_3_3_0; }
		
		//UnaryProperty
		public RuleCall getUnaryPropertyParserRuleCall_4() { return cUnaryPropertyParserRuleCall_4; }
		
		//BinaryProperty
		public RuleCall getBinaryPropertyParserRuleCall_5() { return cBinaryPropertyParserRuleCall_5; }
		
		//'(' UnaryProperty ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//UnaryProperty
		public RuleCall getUnaryPropertyParserRuleCall_6_1() { return cUnaryPropertyParserRuleCall_6_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
		
		//'(' BinaryProperty ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//BinaryProperty
		public RuleCall getBinaryPropertyParserRuleCall_7_1() { return cBinaryPropertyParserRuleCall_7_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
	}
	public class UnaryPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.property.cs.PropertyCS.UnaryProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanPropertyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperandAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperandSequenceTerminalParserRuleCall_0_1_0 = (RuleCall)cOperandAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSequencePropertyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandSequenceParserRuleCall_1_1_0 = (RuleCall)cOperandAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSequenceTightPropertyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOperandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandSequenceParserRuleCall_2_1_0 = (RuleCall)cOperandAssignment_2_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAlwaysPropertyAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cAlwaysKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOperandAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOperandPropertyParserRuleCall_3_2_0 = (RuleCall)cOperandAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNeverBooleanPropertyAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNeverKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOperandAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOperandSequenceTerminalParserRuleCall_4_2_0 = (RuleCall)cOperandAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNeverSequencePropertyAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNeverKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOperandAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOperandSequenceParserRuleCall_5_2_0 = (RuleCall)cOperandAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cNextEPropertyAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cNext_eKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOperandAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOperandSequenceTerminalParserRuleCall_6_2_0 = (RuleCall)cOperandAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cEventuallyBooleanPropertyAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cEventuallyKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cOperandAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cOperandSequenceTerminalParserRuleCall_7_2_0 = (RuleCall)cOperandAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cEventuallySequencePropertyAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cEventuallyKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cOperandAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cOperandSequenceParserRuleCall_8_2_0 = (RuleCall)cOperandAssignment_8_2.eContents().get(0);
		
		//UnaryProperty:
		//	{BooleanProperty} operand=SequenceTerminal
		//	| {SequenceProperty} operand=Sequence
		//	| {SequenceTightProperty} operand=Sequence '!'
		//	| {AlwaysProperty} 'always' operand=Property
		//	| {NeverBooleanProperty} 'never' operand=SequenceTerminal
		//	| {NeverSequenceProperty} 'never' operand=Sequence
		//	| {NextEProperty} 'next_e' operand=SequenceTerminal
		//	| {EventuallyBooleanProperty} 'eventually!' operand=SequenceTerminal
		//	| {EventuallySequenceProperty} 'eventually!' operand=Sequence;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanProperty} operand=SequenceTerminal | {SequenceProperty} operand=Sequence | {SequenceTightProperty}
		//operand=Sequence '!' | {AlwaysProperty} 'always' operand=Property | {NeverBooleanProperty} 'never'
		//operand=SequenceTerminal | {NeverSequenceProperty} 'never' operand=Sequence | {NextEProperty} 'next_e'
		//operand=SequenceTerminal | {EventuallyBooleanProperty} 'eventually!' operand=SequenceTerminal |
		//{EventuallySequenceProperty} 'eventually!' operand=Sequence
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanProperty} operand=SequenceTerminal
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanProperty}
		public Action getBooleanPropertyAction_0_0() { return cBooleanPropertyAction_0_0; }
		
		//operand=SequenceTerminal
		public Assignment getOperandAssignment_0_1() { return cOperandAssignment_0_1; }
		
		//SequenceTerminal
		public RuleCall getOperandSequenceTerminalParserRuleCall_0_1_0() { return cOperandSequenceTerminalParserRuleCall_0_1_0; }
		
		//{SequenceProperty} operand=Sequence
		public Group getGroup_1() { return cGroup_1; }
		
		//{SequenceProperty}
		public Action getSequencePropertyAction_1_0() { return cSequencePropertyAction_1_0; }
		
		//operand=Sequence
		public Assignment getOperandAssignment_1_1() { return cOperandAssignment_1_1; }
		
		//Sequence
		public RuleCall getOperandSequenceParserRuleCall_1_1_0() { return cOperandSequenceParserRuleCall_1_1_0; }
		
		//{SequenceTightProperty} operand=Sequence '!'
		public Group getGroup_2() { return cGroup_2; }
		
		//{SequenceTightProperty}
		public Action getSequenceTightPropertyAction_2_0() { return cSequenceTightPropertyAction_2_0; }
		
		//operand=Sequence
		public Assignment getOperandAssignment_2_1() { return cOperandAssignment_2_1; }
		
		//Sequence
		public RuleCall getOperandSequenceParserRuleCall_2_1_0() { return cOperandSequenceParserRuleCall_2_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2_2() { return cExclamationMarkKeyword_2_2; }
		
		//{AlwaysProperty} 'always' operand=Property
		public Group getGroup_3() { return cGroup_3; }
		
		//{AlwaysProperty}
		public Action getAlwaysPropertyAction_3_0() { return cAlwaysPropertyAction_3_0; }
		
		//'always'
		public Keyword getAlwaysKeyword_3_1() { return cAlwaysKeyword_3_1; }
		
		//operand=Property
		public Assignment getOperandAssignment_3_2() { return cOperandAssignment_3_2; }
		
		//Property
		public RuleCall getOperandPropertyParserRuleCall_3_2_0() { return cOperandPropertyParserRuleCall_3_2_0; }
		
		//{NeverBooleanProperty} 'never' operand=SequenceTerminal
		public Group getGroup_4() { return cGroup_4; }
		
		//{NeverBooleanProperty}
		public Action getNeverBooleanPropertyAction_4_0() { return cNeverBooleanPropertyAction_4_0; }
		
		//'never'
		public Keyword getNeverKeyword_4_1() { return cNeverKeyword_4_1; }
		
		//operand=SequenceTerminal
		public Assignment getOperandAssignment_4_2() { return cOperandAssignment_4_2; }
		
		//SequenceTerminal
		public RuleCall getOperandSequenceTerminalParserRuleCall_4_2_0() { return cOperandSequenceTerminalParserRuleCall_4_2_0; }
		
		//{NeverSequenceProperty} 'never' operand=Sequence
		public Group getGroup_5() { return cGroup_5; }
		
		//{NeverSequenceProperty}
		public Action getNeverSequencePropertyAction_5_0() { return cNeverSequencePropertyAction_5_0; }
		
		//'never'
		public Keyword getNeverKeyword_5_1() { return cNeverKeyword_5_1; }
		
		//operand=Sequence
		public Assignment getOperandAssignment_5_2() { return cOperandAssignment_5_2; }
		
		//Sequence
		public RuleCall getOperandSequenceParserRuleCall_5_2_0() { return cOperandSequenceParserRuleCall_5_2_0; }
		
		//{NextEProperty} 'next_e' operand=SequenceTerminal
		public Group getGroup_6() { return cGroup_6; }
		
		//{NextEProperty}
		public Action getNextEPropertyAction_6_0() { return cNextEPropertyAction_6_0; }
		
		//'next_e'
		public Keyword getNext_eKeyword_6_1() { return cNext_eKeyword_6_1; }
		
		//operand=SequenceTerminal
		public Assignment getOperandAssignment_6_2() { return cOperandAssignment_6_2; }
		
		//SequenceTerminal
		public RuleCall getOperandSequenceTerminalParserRuleCall_6_2_0() { return cOperandSequenceTerminalParserRuleCall_6_2_0; }
		
		//{EventuallyBooleanProperty} 'eventually!' operand=SequenceTerminal
		public Group getGroup_7() { return cGroup_7; }
		
		//{EventuallyBooleanProperty}
		public Action getEventuallyBooleanPropertyAction_7_0() { return cEventuallyBooleanPropertyAction_7_0; }
		
		//'eventually!'
		public Keyword getEventuallyKeyword_7_1() { return cEventuallyKeyword_7_1; }
		
		//operand=SequenceTerminal
		public Assignment getOperandAssignment_7_2() { return cOperandAssignment_7_2; }
		
		//SequenceTerminal
		public RuleCall getOperandSequenceTerminalParserRuleCall_7_2_0() { return cOperandSequenceTerminalParserRuleCall_7_2_0; }
		
		//{EventuallySequenceProperty} 'eventually!' operand=Sequence
		public Group getGroup_8() { return cGroup_8; }
		
		//{EventuallySequenceProperty}
		public Action getEventuallySequencePropertyAction_8_0() { return cEventuallySequencePropertyAction_8_0; }
		
		//'eventually!'
		public Keyword getEventuallyKeyword_8_1() { return cEventuallyKeyword_8_1; }
		
		//operand=Sequence
		public Assignment getOperandAssignment_8_2() { return cOperandAssignment_8_2; }
		
		//Sequence
		public RuleCall getOperandSequenceParserRuleCall_8_2_0() { return cOperandSequenceParserRuleCall_8_2_0; }
	}
	public class BinaryPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.property.cs.PropertyCS.BinaryProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOrBooleanPropertyPropertyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLeftSequenceTerminalParserRuleCall_0_1_0 = (RuleCall)cLeftAssignment_0_1.eContents().get(0);
		private final Keyword cOrKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRightAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_0_3_0 = (RuleCall)cRightAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cImpliesPropertyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftSequenceTerminalParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cEquivalencePropertyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLeftSequenceTerminalParserRuleCall_2_1_0 = (RuleCall)cLeftAssignment_2_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRightSequenceTerminalParserRuleCall_2_3_0 = (RuleCall)cRightAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOverlappingUntilPropertyAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cLeftAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLeftSequenceTerminalParserRuleCall_3_1_0 = (RuleCall)cLeftAssignment_3_1.eContents().get(0);
		private final Keyword cUntil_Keyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cRightAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cRightSequenceTerminalParserRuleCall_3_3_0 = (RuleCall)cRightAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBeforePropertyAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cLeftAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLeftSequenceTerminalParserRuleCall_4_1_0 = (RuleCall)cLeftAssignment_4_1.eContents().get(0);
		private final Keyword cBeforeKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cRightAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cRightSequenceTerminalParserRuleCall_4_3_0 = (RuleCall)cRightAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSuffixImplicationPropertyAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cLeftAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLeftSequenceParserRuleCall_5_1_0 = (RuleCall)cLeftAssignment_5_1.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignGreaterThanSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cRightAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_5_3_0 = (RuleCall)cRightAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cOverlappingSuffixImplicationPropertyAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cLeftAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLeftSequenceParserRuleCall_6_1_0 = (RuleCall)cLeftAssignment_6_1.eContents().get(0);
		private final Keyword cVerticalLineHyphenMinusGreaterThanSignKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cRightAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cRightPropertyParserRuleCall_6_3_0 = (RuleCall)cRightAssignment_6_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cNextEventAPropertyAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cNext_event_aKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cLeftAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cLeftSequenceTerminalParserRuleCall_7_3_0 = (RuleCall)cLeftAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Assignment cRangeAssignment_7_6 = (Assignment)cGroup_7.eContents().get(6);
		private final RuleCall cRangeRangeParserRuleCall_7_6_0 = (RuleCall)cRangeAssignment_7_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_7 = (Keyword)cGroup_7.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_8 = (Keyword)cGroup_7.eContents().get(8);
		private final Assignment cRightAssignment_7_9 = (Assignment)cGroup_7.eContents().get(9);
		private final RuleCall cRightPropertyParserRuleCall_7_9_0 = (RuleCall)cRightAssignment_7_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_10 = (Keyword)cGroup_7.eContents().get(10);
		
		//BinaryProperty:
		//	{OrBooleanPropertyProperty} left=SequenceTerminal 'or' right=Property
		//	| {ImpliesProperty} left=SequenceTerminal '->' right=Property
		//	| {EquivalenceProperty} left=SequenceTerminal '<->' right=SequenceTerminal
		//	| {OverlappingUntilProperty} left=SequenceTerminal 'until_' right=SequenceTerminal
		//	| {BeforeProperty} left=SequenceTerminal 'before' right=SequenceTerminal
		//	| {SuffixImplicationProperty} left=Sequence '|=>' right=Property
		//	| {OverlappingSuffixImplicationProperty} left=Sequence '|->' right=Property
		//	| {NextEventAProperty} 'next_event_a' '(' left=SequenceTerminal ')' '[' range=Range ']' '(' right=Property ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{OrBooleanPropertyProperty} left=SequenceTerminal 'or' right=Property | {ImpliesProperty} left=SequenceTerminal '->'
		//right=Property | {EquivalenceProperty} left=SequenceTerminal '<->' right=SequenceTerminal | {OverlappingUntilProperty}
		//left=SequenceTerminal 'until_' right=SequenceTerminal | {BeforeProperty} left=SequenceTerminal 'before'
		//right=SequenceTerminal | {SuffixImplicationProperty} left=Sequence '|=>' right=Property |
		//{OverlappingSuffixImplicationProperty} left=Sequence '|->' right=Property | {NextEventAProperty} 'next_event_a' '('
		//left=SequenceTerminal ')' '[' range=Range ']' '(' right=Property ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OrBooleanPropertyProperty} left=SequenceTerminal 'or' right=Property
		public Group getGroup_0() { return cGroup_0; }
		
		//{OrBooleanPropertyProperty}
		public Action getOrBooleanPropertyPropertyAction_0_0() { return cOrBooleanPropertyPropertyAction_0_0; }
		
		//left=SequenceTerminal
		public Assignment getLeftAssignment_0_1() { return cLeftAssignment_0_1; }
		
		//SequenceTerminal
		public RuleCall getLeftSequenceTerminalParserRuleCall_0_1_0() { return cLeftSequenceTerminalParserRuleCall_0_1_0; }
		
		//'or'
		public Keyword getOrKeyword_0_2() { return cOrKeyword_0_2; }
		
		//right=Property
		public Assignment getRightAssignment_0_3() { return cRightAssignment_0_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_0_3_0() { return cRightPropertyParserRuleCall_0_3_0; }
		
		//{ImpliesProperty} left=SequenceTerminal '->' right=Property
		public Group getGroup_1() { return cGroup_1; }
		
		//{ImpliesProperty}
		public Action getImpliesPropertyAction_1_0() { return cImpliesPropertyAction_1_0; }
		
		//left=SequenceTerminal
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }
		
		//SequenceTerminal
		public RuleCall getLeftSequenceTerminalParserRuleCall_1_1_0() { return cLeftSequenceTerminalParserRuleCall_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }
		
		//right=Property
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_1_3_0() { return cRightPropertyParserRuleCall_1_3_0; }
		
		//{EquivalenceProperty} left=SequenceTerminal '<->' right=SequenceTerminal
		public Group getGroup_2() { return cGroup_2; }
		
		//{EquivalenceProperty}
		public Action getEquivalencePropertyAction_2_0() { return cEquivalencePropertyAction_2_0; }
		
		//left=SequenceTerminal
		public Assignment getLeftAssignment_2_1() { return cLeftAssignment_2_1; }
		
		//SequenceTerminal
		public RuleCall getLeftSequenceTerminalParserRuleCall_2_1_0() { return cLeftSequenceTerminalParserRuleCall_2_1_0; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_2_2() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_2_2; }
		
		//right=SequenceTerminal
		public Assignment getRightAssignment_2_3() { return cRightAssignment_2_3; }
		
		//SequenceTerminal
		public RuleCall getRightSequenceTerminalParserRuleCall_2_3_0() { return cRightSequenceTerminalParserRuleCall_2_3_0; }
		
		//{OverlappingUntilProperty} left=SequenceTerminal 'until_' right=SequenceTerminal
		public Group getGroup_3() { return cGroup_3; }
		
		//{OverlappingUntilProperty}
		public Action getOverlappingUntilPropertyAction_3_0() { return cOverlappingUntilPropertyAction_3_0; }
		
		//left=SequenceTerminal
		public Assignment getLeftAssignment_3_1() { return cLeftAssignment_3_1; }
		
		//SequenceTerminal
		public RuleCall getLeftSequenceTerminalParserRuleCall_3_1_0() { return cLeftSequenceTerminalParserRuleCall_3_1_0; }
		
		//'until_'
		public Keyword getUntil_Keyword_3_2() { return cUntil_Keyword_3_2; }
		
		//right=SequenceTerminal
		public Assignment getRightAssignment_3_3() { return cRightAssignment_3_3; }
		
		//SequenceTerminal
		public RuleCall getRightSequenceTerminalParserRuleCall_3_3_0() { return cRightSequenceTerminalParserRuleCall_3_3_0; }
		
		//{BeforeProperty} left=SequenceTerminal 'before' right=SequenceTerminal
		public Group getGroup_4() { return cGroup_4; }
		
		//{BeforeProperty}
		public Action getBeforePropertyAction_4_0() { return cBeforePropertyAction_4_0; }
		
		//left=SequenceTerminal
		public Assignment getLeftAssignment_4_1() { return cLeftAssignment_4_1; }
		
		//SequenceTerminal
		public RuleCall getLeftSequenceTerminalParserRuleCall_4_1_0() { return cLeftSequenceTerminalParserRuleCall_4_1_0; }
		
		//'before'
		public Keyword getBeforeKeyword_4_2() { return cBeforeKeyword_4_2; }
		
		//right=SequenceTerminal
		public Assignment getRightAssignment_4_3() { return cRightAssignment_4_3; }
		
		//SequenceTerminal
		public RuleCall getRightSequenceTerminalParserRuleCall_4_3_0() { return cRightSequenceTerminalParserRuleCall_4_3_0; }
		
		//{SuffixImplicationProperty} left=Sequence '|=>' right=Property
		public Group getGroup_5() { return cGroup_5; }
		
		//{SuffixImplicationProperty}
		public Action getSuffixImplicationPropertyAction_5_0() { return cSuffixImplicationPropertyAction_5_0; }
		
		//left=Sequence
		public Assignment getLeftAssignment_5_1() { return cLeftAssignment_5_1; }
		
		//Sequence
		public RuleCall getLeftSequenceParserRuleCall_5_1_0() { return cLeftSequenceParserRuleCall_5_1_0; }
		
		//'|=>'
		public Keyword getVerticalLineEqualsSignGreaterThanSignKeyword_5_2() { return cVerticalLineEqualsSignGreaterThanSignKeyword_5_2; }
		
		//right=Property
		public Assignment getRightAssignment_5_3() { return cRightAssignment_5_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_5_3_0() { return cRightPropertyParserRuleCall_5_3_0; }
		
		//{OverlappingSuffixImplicationProperty} left=Sequence '|->' right=Property
		public Group getGroup_6() { return cGroup_6; }
		
		//{OverlappingSuffixImplicationProperty}
		public Action getOverlappingSuffixImplicationPropertyAction_6_0() { return cOverlappingSuffixImplicationPropertyAction_6_0; }
		
		//left=Sequence
		public Assignment getLeftAssignment_6_1() { return cLeftAssignment_6_1; }
		
		//Sequence
		public RuleCall getLeftSequenceParserRuleCall_6_1_0() { return cLeftSequenceParserRuleCall_6_1_0; }
		
		//'|->'
		public Keyword getVerticalLineHyphenMinusGreaterThanSignKeyword_6_2() { return cVerticalLineHyphenMinusGreaterThanSignKeyword_6_2; }
		
		//right=Property
		public Assignment getRightAssignment_6_3() { return cRightAssignment_6_3; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_6_3_0() { return cRightPropertyParserRuleCall_6_3_0; }
		
		//{NextEventAProperty} 'next_event_a' '(' left=SequenceTerminal ')' '[' range=Range ']' '(' right=Property ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{NextEventAProperty}
		public Action getNextEventAPropertyAction_7_0() { return cNextEventAPropertyAction_7_0; }
		
		//'next_event_a'
		public Keyword getNext_event_aKeyword_7_1() { return cNext_event_aKeyword_7_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//left=SequenceTerminal
		public Assignment getLeftAssignment_7_3() { return cLeftAssignment_7_3; }
		
		//SequenceTerminal
		public RuleCall getLeftSequenceTerminalParserRuleCall_7_3_0() { return cLeftSequenceTerminalParserRuleCall_7_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_5() { return cLeftSquareBracketKeyword_7_5; }
		
		//range=Range
		public Assignment getRangeAssignment_7_6() { return cRangeAssignment_7_6; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_7_6_0() { return cRangeRangeParserRuleCall_7_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_7() { return cRightSquareBracketKeyword_7_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_8() { return cLeftParenthesisKeyword_7_8; }
		
		//right=Property
		public Assignment getRightAssignment_7_9() { return cRightAssignment_7_9; }
		
		//Property
		public RuleCall getRightPropertyParserRuleCall_7_9_0() { return cRightPropertyParserRuleCall_7_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_10() { return cRightParenthesisKeyword_7_10; }
	}
	
	
	private final DocumentElements pDocument;
	private final ImportElements pImport;
	private final PropertyElements pProperty;
	private final UnaryPropertyElements pUnaryProperty;
	private final BinaryPropertyElements pBinaryProperty;
	private final TerminalRule tIMPORT_URI;
	private final TerminalRule tSCHEME;
	
	private final Grammar grammar;
	
	private final SequenceCSGrammarAccess gaSequenceCS;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PropertyCSGrammarAccess(GrammarProvider grammarProvider,
			SequenceCSGrammarAccess gaSequenceCS,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSequenceCS = gaSequenceCS;
		this.gaTerminals = gaTerminals;
		this.pDocument = new DocumentElements();
		this.pImport = new ImportElements();
		this.pProperty = new PropertyElements();
		this.pUnaryProperty = new UnaryPropertyElements();
		this.pBinaryProperty = new BinaryPropertyElements();
		this.tIMPORT_URI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.property.cs.PropertyCS.IMPORT_URI");
		this.tSCHEME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.tetrabox.property.cs.PropertyCS.SCHEME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.tetrabox.property.cs.PropertyCS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public SequenceCSGrammarAccess getSequenceCSGrammarAccess() {
		return gaSequenceCS;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Document:
	//	ownedImports+=Import*
	//	ownedProperties+=Property+;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//Import:
	//	'import' importURI=IMPORT_URI;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Property:
	//	{AndProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->
	//	'and' right=Property
	//	| {OrPropertyBooleanProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '('
	//	left=BinaryProperty ')') -> 'or' right=Property
	//	| {AbortProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty
	//	')') -> 'abort' right=SequenceTerminal
	//	| {UntilProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty
	//	')') -> 'until' right=SequenceTerminal
	//	| UnaryProperty | BinaryProperty | '(' UnaryProperty ')' | '(' BinaryProperty ')';
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//UnaryProperty:
	//	{BooleanProperty} operand=SequenceTerminal
	//	| {SequenceProperty} operand=Sequence
	//	| {SequenceTightProperty} operand=Sequence '!'
	//	| {AlwaysProperty} 'always' operand=Property
	//	| {NeverBooleanProperty} 'never' operand=SequenceTerminal
	//	| {NeverSequenceProperty} 'never' operand=Sequence
	//	| {NextEProperty} 'next_e' operand=SequenceTerminal
	//	| {EventuallyBooleanProperty} 'eventually!' operand=SequenceTerminal
	//	| {EventuallySequenceProperty} 'eventually!' operand=Sequence;
	public UnaryPropertyElements getUnaryPropertyAccess() {
		return pUnaryProperty;
	}
	
	public ParserRule getUnaryPropertyRule() {
		return getUnaryPropertyAccess().getRule();
	}
	
	//BinaryProperty:
	//	{OrBooleanPropertyProperty} left=SequenceTerminal 'or' right=Property
	//	| {ImpliesProperty} left=SequenceTerminal '->' right=Property
	//	| {EquivalenceProperty} left=SequenceTerminal '<->' right=SequenceTerminal
	//	| {OverlappingUntilProperty} left=SequenceTerminal 'until_' right=SequenceTerminal
	//	| {BeforeProperty} left=SequenceTerminal 'before' right=SequenceTerminal
	//	| {SuffixImplicationProperty} left=Sequence '|=>' right=Property
	//	| {OverlappingSuffixImplicationProperty} left=Sequence '|->' right=Property
	//	| {NextEventAProperty} 'next_event_a' '(' left=SequenceTerminal ')' '[' range=Range ']' '(' right=Property ')';
	public BinaryPropertyElements getBinaryPropertyAccess() {
		return pBinaryProperty;
	}
	
	public ParserRule getBinaryPropertyRule() {
		return getBinaryPropertyAccess().getRule();
	}
	
	//terminal IMPORT_URI:
	//	SCHEME ID (("." | "/") ID)*;
	public TerminalRule getIMPORT_URIRule() {
		return tIMPORT_URI;
	}
	
	//terminal SCHEME:
	//	ID ":/";
	public TerminalRule getSCHEMERule() {
		return tSCHEME;
	}
	
	//SERE:
	//	SimpleSERE (':' {FusionSERE.left=current} right=SERE | ';' {ConcatenationSERE.left=current} right=SERE);
	public SequenceCSGrammarAccess.SEREElements getSEREAccess() {
		return gaSequenceCS.getSEREAccess();
	}
	
	public ParserRule getSERERule() {
		return getSEREAccess().getRule();
	}
	
	//SimpleSERE:
	//	SequenceTerminal
	//	| Sequence
	//	| CompoundSERE;
	public SequenceCSGrammarAccess.SimpleSEREElements getSimpleSEREAccess() {
		return gaSequenceCS.getSimpleSEREAccess();
	}
	
	public ParserRule getSimpleSERERule() {
		return getSimpleSEREAccess().getRule();
	}
	
	//SequenceTerminal:
	//	{NotSequenceTerminal} 'not' literal=SequenceTerminal
	//	| {BooleanLiteral} (literal?='true' | 'false') | {OCLExpression} 'ocl' expression=STRING;
	public SequenceCSGrammarAccess.SequenceTerminalElements getSequenceTerminalAccess() {
		return gaSequenceCS.getSequenceTerminalAccess();
	}
	
	public ParserRule getSequenceTerminalRule() {
		return getSequenceTerminalAccess().getRule();
	}
	
	//Sequence:
	//	BracedSERE | RepeatedSERE;
	public SequenceCSGrammarAccess.SequenceElements getSequenceAccess() {
		return gaSequenceCS.getSequenceAccess();
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}
	
	//RepeatedSERE:
	//	{BooleanCountedConsecutiveRepetition} expression=SequenceTerminal (=> '[' '*') count=Count? ']'
	//	| {SequenceCountedConsecutiveRepetition} expression=BracedSERE (=> '[' '*') count=Count? ']'
	//	| {SequenceCountedConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '*') count=Count? ']'
	//	| {BooleanConsecutiveRepetition} expression=SequenceTerminal (=> '[' '+') ']'
	//	| {SequenceConsecutiveRepetition} expression=BracedSERE (=> '[' '+') ']'
	//	| {SequenceConsecutiveRepetition} '(' expression=RepeatedSERE ')' (=> '[' '+') ']'
	//	| {BooleanCountedNonConsecutiveRepetition} expression=SequenceTerminal (=> '[' '=') count=Count ']'
	//	| {BooleanCountedGotoRepetition} expression=SequenceTerminal (=> '[' '->') count=Count? ']'
	//	| {WildCard} '[' '*' count=Count? ']'
	//	| {LengthOne} '[' '+' ']';
	public SequenceCSGrammarAccess.RepeatedSEREElements getRepeatedSEREAccess() {
		return gaSequenceCS.getRepeatedSEREAccess();
	}
	
	public ParserRule getRepeatedSERERule() {
		return getRepeatedSEREAccess().getRule();
	}
	
	//BracedSERE:
	//	'{' expression=SERE '}';
	public SequenceCSGrammarAccess.BracedSEREElements getBracedSEREAccess() {
		return gaSequenceCS.getBracedSEREAccess();
	}
	
	public ParserRule getBracedSERERule() {
		return getBracedSEREAccess().getRule();
	}
	
	//CompoundSERE:
	//	RepeatedSERE
	//	| BracedSERE
	//	| BinaryCompoundSERE;
	public SequenceCSGrammarAccess.CompoundSEREElements getCompoundSEREAccess() {
		return gaSequenceCS.getCompoundSEREAccess();
	}
	
	public ParserRule getCompoundSERERule() {
		return getCompoundSEREAccess().getRule();
	}
	
	//BinaryCompoundSERE:
	//	{SEREOr} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '|' (right=RepeatedSERE |
	//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREAndNLM} (left=RepeatedSERE | left=BracedSERE | '('
	//	left=BinaryCompoundSERE ')') -> '&' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')') |
	//	{SEREAndLM} (left=RepeatedSERE | left=BracedSERE | '(' left=BinaryCompoundSERE ')') -> '&&' (right=RepeatedSERE |
	//	right=BracedSERE | '(' right=BinaryCompoundSERE ')') | {SEREWithin} (left=RepeatedSERE | left=BracedSERE | '('
	//	left=BinaryCompoundSERE ')') -> 'within' (right=RepeatedSERE | right=BracedSERE | '(' right=BinaryCompoundSERE ')');
	public SequenceCSGrammarAccess.BinaryCompoundSEREElements getBinaryCompoundSEREAccess() {
		return gaSequenceCS.getBinaryCompoundSEREAccess();
	}
	
	public ParserRule getBinaryCompoundSERERule() {
		return getBinaryCompoundSEREAccess().getRule();
	}
	
	//Count:
	//	COUNT=NUMBER | Range;
	public SequenceCSGrammarAccess.CountElements getCountAccess() {
		return gaSequenceCS.getCountAccess();
	}
	
	public ParserRule getCountRule() {
		return getCountAccess().getRule();
	}
	
	//Range:
	//	LOWER_BOUND=NUMBER ':' HIGHER_BOUND=NUMBER;
	public SequenceCSGrammarAccess.RangeElements getRangeAccess() {
		return gaSequenceCS.getRangeAccess();
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//NUMBER ecore::EInt:
	//	INT;
	public SequenceCSGrammarAccess.NUMBERElements getNUMBERAccess() {
		return gaSequenceCS.getNUMBERAccess();
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public SequenceCSGrammarAccess.FQNElements getFQNAccess() {
		return gaSequenceCS.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

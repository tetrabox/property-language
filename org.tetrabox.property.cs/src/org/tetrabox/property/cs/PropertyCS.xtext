// automatically generated by Xtext
grammar org.tetrabox.property.cs.PropertyCS with org.tetrabox.sequence.cs.SequenceCS

import "platform:/resource/org.tetrabox.property.model/model/property.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Document:
	(ownedImports+=Import)*
	(ownedProperties+=Property)+;

Import:
	'import' importURI=IMPORT_URI;

Property:
	{AndProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->'and' right=Property
	| {OrPropertyBooleanProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->'or' right=Property
	| {AbortProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->'abort' right=SequenceTerminal
	| {UntilProperty} (left=UnaryProperty | left=BinaryProperty | '(' left=UnaryProperty ')' | '(' left=BinaryProperty ')') ->'until' right=SequenceTerminal
	| UnaryProperty | BinaryProperty | '(' UnaryProperty ')' | '(' BinaryProperty ')'
;

UnaryProperty:
	{BooleanProperty} operand=SequenceTerminal
	| {SequenceProperty} operand=Sequence
	| {SequenceTightProperty} operand=Sequence '!'
	| {AlwaysProperty} 'always' operand=Property
	| {NeverBooleanProperty} 'never' operand=SequenceTerminal
	| {NeverSequenceProperty} 'never' operand=Sequence
	| {NextEProperty} 'next_e' operand=SequenceTerminal
	| {EventuallyBooleanProperty} 'eventually!' operand=SequenceTerminal
	| {EventuallySequenceProperty} 'eventually!' operand=Sequence
;

BinaryProperty:
	{OrBooleanPropertyProperty} left=SequenceTerminal 'or' right=Property
	| {ImpliesProperty} left=SequenceTerminal '->' right=Property
	| {EquivalenceProperty} left=SequenceTerminal '<->' right=SequenceTerminal
	| {OverlappingUntilProperty} left=SequenceTerminal 'until_' right=SequenceTerminal
	| {BeforeProperty} left=SequenceTerminal 'before' right=SequenceTerminal
	| {SuffixImplicationProperty} left=Sequence '|=>' right=Property
	| {OverlappingSuffixImplicationProperty} left=Sequence '|->' right=Property
	| {NextEventAProperty} 'next_event_a' '(' left=SequenceTerminal ')' '[' range=Range ']' '(' right=Property ')'
;

terminal IMPORT_URI:
	SCHEME ID (("." | "/") ID)*;
	
terminal SCHEME:
	ID ":/";
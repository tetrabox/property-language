/*
 * generated by Xtext 2.10.0
 */
package org.tetrabox.property.cs.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.ocl.xtext.basecs.ConstraintCS
import org.eclipse.xtext.scoping.Scopes
import property.Document
import sequence.SequencePackage

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class PropertyCSScopeProvider extends AbstractPropertyCSScopeProvider {
	override def getScope(EObject context, EReference reference) {
		if (reference == SequencePackage.Literals.OCL_EXPRESSION__EXPRESSION) {
			var root = context
			while (!(root instanceof Document)) {
				root = root.eContainer
			}
			val document = root as Document
			val allContent = newArrayList
			document.ownedImports.map[
				val resource = ResourceUtils.openImport(it.eResource, it.importURI)
				resource.allContents.filter[
					it instanceof ConstraintCS
				]
			].forEach[l|
				l.forEach[o|
					allContent += o
				]
			]
			return Scopes.scopeFor(allContent)
		}
		return super.getScope(context, reference);
	}
}
